<?php

namespace App\Security;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Random\RandomException;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Http\Authenticator\AbstractLoginFormAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\RememberMeBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\SecurityRequestAttributes;
use Symfony\Component\Security\Http\Util\TargetPathTrait;

class AppAuthenticator extends AbstractLoginFormAuthenticator
{
    use TargetPathTrait;

    public const LOGIN_ROUTE = 'app_login';
    public const AFTER_LOGIN_ROUTE = 'app_dashboard';

    public function __construct(
        private readonly UrlGeneratorInterface $urlGenerator,
        private readonly EntityManagerInterface $entityManager,
    ) {
    }

    public function authenticate(Request $request): Passport
    {
        /** @var array<string> $login */
        $login = $request->get('login', [
            'email' => '',
            'password' => '',
        ]);

        $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $login['email']);

        /** @var array<string> $loginFormInfo */
        $loginFormInfo = $request->get('login');
        $loginToken = $loginFormInfo && isset($loginFormInfo['_token']) ? $loginFormInfo['_token'] : null;

        return new Passport(
            new UserBadge($login['email'], function (mixed $username) {
                return $this->entityManager->getRepository(User::class)->findOneBy([
                    'email' => $username,
                ]);
            }),
            new PasswordCredentials($login['password']),
            [
                new CsrfTokenBadge('authenticate', $loginToken),
                new RememberMeBadge(),
            ]
        );
    }

    /**
     * @throws RandomException
     */
    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
		/** @var string $callback */
        $callback = $request->get('callback');

        if($callback) {
			return new RedirectResponse($callback);
		}
		
        return new RedirectResponse($this->urlGenerator->generate(self::AFTER_LOGIN_ROUTE));
    }

    protected function getLoginUrl(Request $request): string
    {
        return $this->urlGenerator->generate(self::LOGIN_ROUTE);
    }
}
